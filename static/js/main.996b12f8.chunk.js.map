{"version":3,"sources":["logo.svg","components/Jumbotron/Jumbotron.js","components/Form/Input.js","components/Form/FormBtn.js","components/Grid/Container.js","components/Results/List.js","components/Results/ListItem.js","components/SaveBtn/SaveBtn.js","utils/API.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Jumbotron","_ref","children","react_default","a","createElement","style","height","clear","paddingTop","textAlign","className","Input","props","Object","assign","FormBtn","marginBottom","Container","fluid","concat","List","ListItem","SaveBtn","API","axios","get","App","state","topic","startYear","endYear","article","then","data","console","log","components_Jumbotron_Jumbotron","Container_Container","Input_Input","value","this","onChange","handleInputChange","name","placeholder","FormBtn_FormBtn","onClick","handleFormSubmit","List_List","ListItem_ListItem","components_SaveBtn_SaveBtn","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.996b12f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\n\nconst Jumbotron = ({ children }) => (\n  <div\n    style={{ height: 300, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    className=\"jumbotron\"\n  >\n    {children}\n  </div>\n);\n\nexport default Jumbotron;\n","import React from \"react\";\n\nexport const Input = props => (\n  <div className=\"form-group\">\n    <input className=\"form-control\" {...props} />\n  </div>\n);\n","import React from \"react\";\n\nexport const FormBtn = props => (\n  <button {...props} style={{ marginBottom: 10 }} className=\"btn btn-success\">\n    {props.children}\n  </button>\n);\n","import React from \"react\";\n\nexport const Container = ({ fluid, children }) => (\n  <div className={`container${fluid ? \"-fluid\" : \"\"} border mb-5`}>\n    {children}\n  </div>\n);\n","import React from \"react\";\nimport \"./List.css\";\n\nexport const List = ({ children }) => {\n  return (\n    <div className=\"list-overflow-container\">\n      <ul className=\"list-group\">\n        {children}\n      </ul>\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const ListItem = props => (\n  <li className=\"list-group-item\">\n    {props.children}\n  </li>\n);\n","import React from \"react\";\nimport \"./SaveBtn.css\";\n\nconst SaveBtn = props => (\n  <span className=\"save-btn\" {...props}>\n    Save\n  </span>\n);\n\nexport default SaveBtn;\n","// ROUTING ON FRONT-END\nimport axios from \"axios\";\n\nexport default {\n\n getArticles: function() {\n    return axios.get(\"/api/articles/scrape\");\n }\n \n\n\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Jumbotron from \"./components/Jumbotron\";\nimport { Input, TextArea, FormBtn } from \"./components/Form\";\nimport { Container }  from \"./components/Grid\";\nimport { List, ListItem } from \"./components/Results\";\nimport SaveBtn from \"./components/SaveBtn\";\nimport API from \"./utils/API\"\n\nclass App extends Component {\n  state = {\n    topic: \"123\",\n    startYear: 35,\n    endYear: 2018,\n    article: \"the article\"\n  };\n\ncomponentDidMount(){\n  API.getArticles().then(data => {\n    console.log(data)\n  })\n}\n\n  render() {\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1>\n            New York Times Article Scrubber\n      </h1>\n          <h4>\n            Search for and annotate articles of interest\n      </h4>\n        </Jumbotron>\n        <Container>\n          <form>\n            <h1>Search</h1>\n            <h4>Topic</h4>\n            <Input\n              value={this.state.topic}\n              onChange={this.handleInputChange}\n              name=\"topic\"\n              placeholder=\"topic\"\n            />\n            <h4>Start Year</h4>\n            <Input\n              value={this.state.startYear}\n              onChange={this.handleInputChange}\n              name=\"startYear\"\n              placeholder=\"Start Year\"\n            />\n            <h4>End Year</h4>\n            <Input\n              value={this.state.endYear}\n              onChange={this.handleInputChange}\n              name=\"endYear\"\n              placeholder=\"End Year\"\n            />\n            <FormBtn\n              onClick={this.handleFormSubmit}\n            >\n              Search\n              </FormBtn>\n          </form>\n        </Container>\n        <Container>\n          <h1>Results</h1>\n          <List>\n          <ListItem>12345\n            {/* <Link to={\"https://www.nytimes.com/\"}>https://www.nytimes.com/\n            </Link> */}\n            <SaveBtn />\n          </ListItem>\n          <ListItem>67890\n            {/* <Link to={\"https://www.nytimes.com/\"}>https://www.nytimes.com/\n            </Link> */}\n            <SaveBtn />\n          </ListItem>\n          </List>\n      </Container >\n      <Container>\n          <h1>Saved Articles</h1>\n          <List>\n          <ListItem>12345\n            {/* <Link to={\"https://www.nytimes.com/\"}>https://www.nytimes.com/\n            </Link> */}\n            <SaveBtn />\n          </ListItem>\n          <ListItem>67890\n            {/* <Link to={\"https://www.nytimes.com/\"}>https://www.nytimes.com/\n            </Link> */}\n            <SaveBtn />\n          </ListItem>\n          </List>\n      </Container >\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}